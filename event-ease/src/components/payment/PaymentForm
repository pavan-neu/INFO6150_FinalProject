import React, { useState, useEffect } from 'react';
import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';
import { Button, Alert, Spinner } from 'react-bootstrap';
import axios from 'axios';

const PaymentForm = ({ tickets, amount, onPaymentSuccess, onPaymentError }) => {
  const stripe = useStripe();
  const elements = useElements();
  
  const [clientSecret, setClientSecret] = useState('');
  const [paymentIntentId, setPaymentIntentId] = useState('');
  const [error, setError] = useState(null);
  const [processing, setProcessing] = useState(false);
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  
  useEffect(() => {
    const createPaymentIntent = async () => {
      try {
        const response = await axios.post('/api/payments/create-intent', {
          ticketIds: tickets,
          amount
        });
        
        setClientSecret(response.data.clientSecret);
        setPaymentIntentId(response.data.paymentIntentId);
      } catch (err) {
        setError(err.response?.data?.message || 'Error creating payment intent');
      }
    };
    
    if (tickets && tickets.length > 0 && amount > 0) {
      createPaymentIntent();
    }
  }, [tickets, amount]);
  
  const handleSubmit = async (event) => {
    event.preventDefault();
    
    if (!stripe || !elements) {
      return;
    }
    
    setProcessing(true);
    setError(null);
    
    const cardElement = elements.getElement(CardElement);
    
    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: cardElement,
        billing_details: {
          name: 'Event Attendee', // You could make this dynamic with user info
        },
      }
    });
    
    if (error) {
      setError(error.message);
      setProcessing(false);
      if (onPaymentError) onPaymentError(error.message);
    } else if (paymentIntent.status === 'succeeded') {
      // Notify the server of successful payment
      try {
        const response = await axios.post('/api/payments/success', {
          paymentIntentId
        });
        
        setPaymentSuccess(true);
        setProcessing(false);
        
        if (onPaymentSuccess) {
          onPaymentSuccess(response.data);
        }
      } catch (err) {
        setError('Payment successful, but failed to record transaction. Please contact support.');
        setProcessing(false);
        if (onPaymentError) onPaymentError(err.response?.data?.message);
      }
    }
  };
  
  return (
    <div className="payment-form">
      {error && <Alert variant="danger">{error}</Alert>}
      {paymentSuccess ? (
        <Alert variant="success">
          Payment successful! Your tickets have been confirmed.
        </Alert>
      ) : (
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label className="d-block mb-2">Card Details</label>
            <div className="card-element-container p-3 border rounded">
              <CardElement 
                options={{
                  style: {
                    base: {
                      fontSize: '16px',
                      color: '#424770',
                      '::placeholder': {
                        color: '#aab7c4',
                      },
                    },
                    invalid: {
                      color: '#9e2146',
                    },
                  },
                }}
              />
            </div>
          </div>
          
          <Button 
            type="submit" 
            variant="success" 
            size="lg" 
            className="w-100" 
            disabled={!stripe || processing || !clientSecret}
          >
            {processing ? (
              <>
                <Spinner animation="border" size="sm" className="me-2" />
                Processing...
              </>
            ) : (
              `Pay $${amount.toFixed(2)}`
            )}
          </Button>
        </form>
      )}
    </div>
  );
};

export default PaymentForm;